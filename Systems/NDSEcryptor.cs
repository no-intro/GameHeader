namespace GameHeader.Systems
{
    using System;

    public class NDSEcryptor
    {
        private uint[] arg2 = new uint[3];
        private uint[] card_hash = new uint[0x412];
        private byte[] encr_data = new byte[] { 
            0x99, 0xd5, 0x20, 0x5f, 0x57, 0x44, 0xf5, 0xb9, 110, 0x19, 0xa4, 0xd9, 0x9e, 0x6a, 90, 0x94, 
            0xd8, 0xae, 0xf1, 0xeb, 0x41, 0x75, 0xe2, 0x3a, 0x93, 130, 0xd0, 50, 0x33, 0xee, 0x31, 0xd5, 
            0xcc, 0x57, 0x61, 0x9a, 0x37, 6, 0xa2, 0x1b, 0x79, 0x39, 0x72, 0xf5, 0x55, 0xae, 0xf6, 190, 
            0x5f, 0x1b, 0x69, 0xfb, 0xe5, 0x9d, 0xf1, 0xe9, 0xce, 0x2c, 0xd9, 0xa1, 0x5e, 50, 5, 230, 
            0xfe, 0xd3, 0xfe, 0xcf, 0xd4, 0x62, 4, 13, 0x8b, 0xf5, 0xec, 0xb7, 0x2b, 0x60, 0x79, 0xbb, 
            0x12, 0x95, 0x31, 13, 110, 0x3f, 0xda, 0x2b, 0x88, 0x84, 240, 0xf1, 0x3d, 0x12, 0x7e, 0x25, 
            0x45, 0x22, 0xf1, 0xbb, 0x24, 6, 0x1a, 6, 0x11, 0xad, 0xdf, 40, 0x8b, 100, 0x81, 0x34, 
            0x2b, 0xeb, 0x33, 0x29, 0x99, 170, 0xf2, 0xbd, 0x9c, 20, 0x95, 0x9d, 0x9f, 0xf7, 0xf5, 140, 
            0x72, 0x97, 0xa1, 0x29, 0x9d, 0xd1, 0x5f, 0xcf, 0x66, 0x4d, 7, 0x1a, 0xde, 0xd3, 0x4a, 0x4b, 
            0x85, 0xc9, 0xa7, 0xa3, 0x17, 0x95, 5, 0x3a, 0x3d, 0x49, 10, 0xbf, 10, 0x89, 0x8b, 0xa2, 
            0x4a, 130, 0x49, 0xdd, 0x27, 0x90, 0xf1, 11, 0xe9, 0xeb, 0x1c, 0x6a, 0x83, 0x76, 0x45, 5, 
            0xba, 0x81, 0x70, 0x61, 0x17, 0x3f, 0x4b, 0xde, 0xae, 0xcf, 0xab, 0x39, 0x57, 0xf2, 0x3a, 0x56, 
            0x48, 0x11, 0xad, 0x8a, 0x40, 0xe1, 0x45, 0x3f, 250, 0x9b, 2, 0x54, 0xca, 0xa6, 0x93, 0xfb, 
            0xef, 0x4d, 0xfe, 0x6f, 0xa3, 0xd8, 0x87, 0x9c, 8, 0xba, 0xd5, 0x48, 0x6a, 0x8d, 0x2d, 0xfd, 
            110, 0x15, 0xf8, 0x74, 0xbd, 190, 0x52, 0x8b, 0x18, 0x22, 0x8a, 0x9e, 0xfb, 0x74, 0x37, 7, 
            0x1b, 0x36, 0x6c, 0x4a, 0x19, 0xba, 0x42, 0x62, 0xb9, 0x79, 0x91, 0x10, 0x7b, 0x67, 0x65, 150, 
            0xfe, 2, 0x23, 0xe8, 0xee, 0x99, 140, 0x77, 0x3e, 0x5c, 0x86, 100, 0x4d, 0x6d, 120, 0x86, 
            0xa5, 0x4f, 0x65, 0xe2, 30, 0xb2, 0xdf, 90, 10, 0xd0, 0x7e, 8, 20, 0xb0, 0x71, 0xac, 
            0xbd, 0xdb, 0x83, 0x1c, 0xb9, 0xd7, 0xa1, 0x62, 0xcd, 0xc6, 0x63, 0x7c, 0x52, 0x69, 0xc3, 230, 
            0xbf, 0x75, 0xce, 0x12, 0x44, 0x5d, 0x21, 4, 250, 0xfb, 0xd3, 60, 0x38, 0x11, 0x63, 0xd4, 
            0x95, 0x85, 0x41, 0x49, 70, 9, 0xf2, 8, 0x43, 0x11, 220, 0x1f, 0x76, 0xc0, 0x15, 0x6d, 
            0x1f, 60, 0x63, 0x70, 0xea, 0x87, 0x80, 0x6c, 0xc3, 0xbd, 0x63, 0x8b, 0xc2, 0x37, 0x21, 0x37, 
            220, 0xee, 9, 0x23, 0x2e, 0x37, 0x6a, 0x4d, 0x73, 0x90, 0xf7, 80, 0x30, 0xac, 0x1c, 0x92, 
            4, 0x10, 0x23, 0x91, 0x4f, 210, 7, 170, 0x68, 0x3e, 0x4f, 0x9a, 0xc9, 100, 0x60, 0x6a, 
            200, 20, 0x21, 0xf3, 0xd6, 0x22, 0x41, 0x12, 0x44, 0x24, 0xcf, 230, 0x8a, 0x56, 0xdd, 13, 
            0x53, 0x4d, 0xe1, 0x85, 30, 140, 0x52, 90, 0x9c, 0x19, 0x84, 0xc2, 3, 0x57, 0xf1, 0x6f, 
            0xe3, 0, 190, 0x58, 0xf6, 0x4c, 0xed, 0xd5, 0x21, 100, 0x9c, 0x1f, 190, 0x55, 3, 60, 
            0x4a, 220, 0xff, 170, 0xc9, 0xda, 0xe0, 0x5d, 0x5e, 0xbf, 230, 0xde, 0xf5, 0xd8, 0xb1, 0xf8, 
            0xff, 0x36, 0xb3, 0xb9, 0x62, 0x67, 0x95, 0xdb, 0x31, 0x5f, 0x37, 0xed, 0x4c, 0x70, 0x67, 0x99, 
            0x90, 0xb5, 0x18, 0x31, 0x6c, 0x3d, 0x99, 0x99, 0xe4, 0x42, 0xda, 0xd3, 0x25, 0x42, 0x13, 160, 
            0xae, 0xd7, 0x70, 0x6c, 0xb1, 0x55, 0xcf, 0xc7, 0xd7, 70, 0xd5, 0x43, 0x61, 0x17, 0x3d, 0x44, 
            40, 0xe9, 0x33, 0x85, 0xd5, 0xd0, 0xa2, 0x93, 170, 0x25, 0x12, 0x1f, 0xfb, 0xc5, 11, 70, 
            0xf5, 0x97, 0x76, 0x56, 0x45, 0xa6, 190, 0x87, 0xb1, 0x94, 0x6b, 0xe8, 0xb1, 0xfe, 0x33, 0x99, 
            0xae, 0x1f, 0x3e, 0x6c, 0x39, 0x71, 0x1d, 9, 0, 0x90, 0x37, 0xe4, 0x10, 0x3e, 0x75, 0x74, 
            0xff, 140, 0x83, 0x3b, 0xb0, 0xf1, 0xb0, 0xf9, 1, 5, 0x47, 0x42, 0x95, 0xf1, 0xd6, 0xac, 
            0x7e, 0x38, 230, 0x9e, 0x95, 0x74, 0x26, 0x3f, 180, 0x68, 80, 0x18, 0xd0, 0x43, 0x30, 180, 
            0x4c, 0x4b, 0xe3, 0x68, 0xbf, 0xe5, 0x4d, 0xb6, 0x95, 0x8b, 10, 160, 0x74, 0x25, 50, 0x77, 
            0xcf, 0xa1, 0xf7, 0x2c, 0xd8, 0x71, 0x13, 90, 0xab, 0xea, 0xc9, 0x51, 0xe8, 13, 0xee, 0xef, 
            0xe9, 0x93, 0x7e, 0x19, 0xa7, 30, 0x43, 0x38, 0x81, 0x16, 0x2c, 0xa1, 0x48, 0xe3, 0x73, 0xcc, 
            0x29, 0x21, 0x6c, 0xd3, 0x5d, 0xce, 160, 0xd9, 0x61, 0x71, 0x43, 160, 0x15, 0x13, 0xb5, 100, 
            0x92, 0xcf, 0x2a, 0x19, 220, 0xad, 0xb7, 0xa5, 0x9f, 0x86, 0x65, 0xf8, 0x1a, 0x9f, 0xe7, 0xfb, 
            0xf7, 0xfd, 0xb8, 0x13, 0x6c, 0x27, 0xdb, 0x6f, 0xdf, 0x35, 0x1c, 0xf7, 0x8d, 0x2c, 0x5b, 0x9b, 
            0x12, 0xab, 0x38, 100, 6, 0xcc, 0xde, 0x31, 0xe8, 0x4e, 0x75, 0x11, 100, 0xe3, 250, 0xea, 
            0xeb, 0x34, 0x54, 0xc2, 0xad, 0x3f, 0x34, 0xeb, 0x93, 0x2c, 0x7d, 0x26, 0x36, 0x9d, 0x56, 0xf3, 
            90, 0xe1, 0xf6, 0xb3, 0x98, 0x63, 0x4a, 0x9e, 50, 0x83, 0xe4, 0x9a, 0x84, 0x60, 0x7d, 0x90, 
            0x2e, 0x13, 14, 0xee, 0x93, 0x4b, 0x36, 0xa2, 0x85, 0xec, 0x16, 0x38, 0xe8, 0x88, 6, 2, 
            0xbf, 240, 160, 0x3a, 0xed, 0xd7, 0x6a, 0x9a, 0x73, 0xe1, 0x57, 0xcf, 0xf8, 0x44, 0xb8, 220, 
            0x2e, 0x23, 0x59, 0xd1, 0xdf, 0x95, 0x52, 0x71, 0x99, 0x61, 160, 0x4b, 0xd5, 0x7f, 110, 120, 
            0xba, 0xa9, 0xc5, 0x30, 0xd3, 0x40, 0x86, 50, 0x9d, 50, 12, 0x9c, 0x37, 0xb7, 2, 0x2f, 
            0xba, 0x54, 0x98, 0xa9, 0xc4, 0x13, 4, 0xc9, 0x8d, 190, 200, 0xe7, 0x5d, 0x97, 80, 0x2e, 
            0x93, 0xd6, 0x22, 0x59, 12, 0x27, 0xbc, 0x22, 0x92, 0xe0, 0xa7, 0x20, 15, 0x93, 0x6f, 0x7f, 
            0x4c, 0x9f, 0xd3, 0xb5, 0xa6, 0x2a, 11, 0x74, 0x67, 0x49, 0x7d, 0x10, 0x26, 0xcb, 0xd1, 0xc5, 
            0x86, 0x71, 0xe7, 140, 160, 0x9c, 0xe9, 0x5b, 0xb2, 0x1a, 0xf6, 1, 0xee, 140, 0x9e, 0x5e, 
            0x83, 0xf2, 0x1a, 0xdb, 230, 0xe5, 0xea, 0x84, 0x59, 0x76, 210, 0x7c, 0xf6, 0x8d, 0xa5, 0x49, 
            0x36, 0x48, 0xc2, 0x16, 0x52, 0xbb, 0x83, 0xa3, 0x74, 0xb9, 7, 12, 0x3b, 0xff, 0x61, 40, 
            0xe1, 0x61, 0xe9, 0xe4, 0xef, 110, 0x15, 170, 0x4e, 0xba, 0xe8, 0x5d, 5, 150, 0xbb, 50, 
            0x56, 0xb0, 0xfb, 0x72, 0x52, 15, 14, 200, 0x42, 0x25, 0x65, 0x76, 0x89, 0xaf, 0xf2, 0xde, 
            0x10, 0x27, 240, 1, 0x4b, 0x74, 0xa7, 0x97, 7, 0xd5, 0x26, 0x54, 0x54, 9, 0x1f, 130, 
            10, 0x86, 0x7d, 0x30, 0x39, 14, 0xb3, 0x26, 0x9b, 11, 0x57, 0xbb, 0x36, 6, 0x31, 0xaf, 
            0xfd, 0x79, 0xfc, 0xd9, 0x30, 0x10, 0x2b, 12, 0xb3, 0xe1, 0x9b, 0xd7, 0x7b, 220, 0x5f, 0xef, 
            210, 0xf8, 0x13, 0x45, 0x4d, 0x47, 0x75, 0xbd, 70, 150, 60, 0x7e, 0x75, 0xf3, 0x3e, 0xb5, 
            0x67, 0xc5, 0x9a, 0x3b, 0xb0, 0x5b, 0x29, 0x6b, 0xde, 0x80, 0x5b, 200, 0x15, 5, 0xb1, 0x31, 
            0xb6, 0xce, 0x49, 0xdd, 0xad, 0x84, 0xb5, 0xae, 0x60, 220, 0x67, 0x31, 0x34, 0x30, 0xfe, 0x4e, 
            0xbd, 0x80, 0x2f, 0xa6, 0xbf, 0x63, 0x39, 0x21, 0x86, 0xd9, 0x35, 0x7f, 0x16, 0x68, 0x22, 5, 
            0x54, 0xe9, 0x90, 0x26, 140, 7, 0x6c, 0x51, 0xa4, 0x31, 0x55, 0xd7, 9, 7, 0xa8, 0x3e, 
            0x2e, 0x53, 0x66, 0xc1, 0xf8, 0xf2, 0x7b, 0xc4, 0xf2, 0x58, 0xcf, 0xf1, 0x87, 0xc5, 0xa2, 0xe7, 
            0x27, 0x8f, 0x30, 0x87, 0x58, 160, 100, 0x62, 0x23, 0x18, 0xb9, 0x88, 0x7c, 250, 0xce, 0xc4, 
            0x98, 0xae, 0xad, 0x17, 0xcc, 0x4a, 0x5b, 0xf3, 0xe9, 0x48, 0xd5, 0x56, 0xd3, 13, 0xf2, 200, 
            0x92, 0x73, 140, 0xdb, 0xd7, 0x2f, 0x56, 0xac, 0x81, 0xf9, 0x92, 0x69, 0x4d, 0xc6, 50, 0xf6, 
            230, 0xc0, 0x8d, 0x21, 0xe2, 0x76, 0x80, 0x61, 0x11, 0xbc, 220, 0x6c, 0x93, 0xaf, 0x19, 0x69, 
            0x9b, 0xd0, 0xbf, 0xb9, 0x31, 0x9f, 2, 0x67, 0xa3, 0x51, 0xee, 0x83, 6, 0x22, 0x7b, 12, 
            0xab, 0x49, 0x42, 0x40, 0xb8, 0xd5, 1, 0x7d, 0xce, 0x5e, 0xf7, 0x55, 0x53, 0x39, 0xc5, 0x99, 
            70, 0xd8, 0x87, 0x9f, 0xba, 0xf7, 100, 180, 0xe3, 0x9a, 250, 0xa1, 0x6d, 0x90, 0x68, 0x10, 
            0x30, 0xca, 0x8a, 0x54, 0xa7, 0x9f, 0x60, 0xc3, 0x19, 0xf5, 0x6b, 13, 0x7a, 0x51, 0x98, 230, 
            0x98, 0x43, 0x51, 180, 0xd6, 0x35, 0xe9, 0x4f, 0xc3, 0xdf, 15, 0x7b, 0xd6, 0x2f, 0x5c, 0xbd, 
            0x3a, 0x15, 0x61, 0x19, 0xf1, 0x4b, 0xcb, 170, 220, 0x6d, 100, 0xc9, 0xd3, 0xc6, 30, 0x56, 
            0xef, 0x38, 0x4c, 80, 0x71, 0x86, 0x75, 0xcc, 13, 13, 0x4e, 0xe9, 40, 0xf6, 6, 0x5d, 
            0x70, 0x1b, 170, 0xd3, 0x45, 0xcf, 0xa8, 0x39, 0xac, 0x95, 0xa6, 0x2e, 180, 0xe4, 0x22, 0xd4, 
            0x74, 0xa8, 0x37, 0x5f, 0x48, 0x7a, 4, 0xcc, 0xa5, 0x4c, 0x40, 0xd8, 40, 180, 40, 8, 
            13, 0x1c, 0x72, 0x52, 0x41, 240, 0x7d, 0x47, 0x19, 0x3a, 0x53, 0x4e, 0x58, 0x84, 0x62, 0x6b, 
            0x93, 0xb5, 0x8a, 0x81, 0x21, 0x4e, 13, 220, 180, 0x3f, 0xa2, 0xc6, 0xfc, 0xc9, 0x2b, 0x40, 
            0xda, 0x38, 4, 0xe9, 0x5e, 90, 0x86, 0x6b, 12, 0x22, 0x25, 0x85, 0x68, 0x11, 0x8d, 0x7c, 
            0x92, 0x1d, 0x95, 0x55, 0x4d, 0xab, 0x8e, 0xbb, 0xda, 0xa6, 230, 0xb7, 0x51, 0xb6, 50, 90, 
            5, 0x41, 0xdd, 5, 0x2a, 10, 0x56, 80, 0x91, 0x17, 0x47, 0xcc, 0xc9, 230, 0x7e, 0xb5, 
            0x61, 0x4a, 0xdb, 0x73, 0x67, 0x51, 200, 0x33, 0xf5, 0xda, 110, 0x74, 0x2e, 0x54, 0xc3, 0x37, 
            13, 0x6d, 0xaf, 8, 0xe8, 0x15, 0x8a, 0x5f, 0xe2, 0x59, 0x21, 0xcd, 0xa8, 0xde, 12, 6, 
            90, 0x77, 0x6b, 0x5f, 0xdb, 0x18, 0x65, 0x3e, 200, 80, 0xde, 120, 0xe0, 0xb8, 130, 0xb3, 
            0x5d, 0x4e, 0x72, 50, 7, 0x4f, 0xc1, 0x34, 0x23, 0xba, 150, 0xb7, 0x67, 0x4e, 0xa4, 40, 
            30, 0x34, 0x62, 0xeb, 0x2d, 0x6a, 0x70, 0xe9, 0x2f, 0x42, 0xc4, 0x70, 0x4e, 90, 0x31, 0x9c, 
            0xf9, 0x5b, 0x47, 40, 170, 0xda, 0x71, 0x6f, 0x38, 0x1f, 0xb3, 120, 0xc4, 0x92, 0x6b, 0x1c, 
            0x9e, 0xf6, 0x35, 0x9a, 0xb7, 0x4d, 14, 0xbf, 0xcc, 0x18, 0x29, 0x41, 3, 0x48, 0x35, 0x5d, 
            0x55, 0xd0, 0x2b, 0xc6, 0x29, 0xaf, 0x5c, 0x60, 0x74, 0x69, 0x8e, 0x5e, 0x9b, 0x7c, 0xd4, 0xbd, 
            0x7b, 0x44, 100, 0x7d, 0x3f, 0x92, 0x5d, 0x69, 0xb6, 0x1f, 0, 0x4b, 0xd4, 0x83, 0x35, 0xcf, 
            0x7e, 100, 0x4e, 0x17, 0xae, 0x8d, 0xd5, 0x2e, 0x9a, 40, 0x12, 0x4e, 0x2e, 0x2b, 0x49, 8, 
            0x5c, 0xae, 0xc6, 70, 0x85, 0xae, 0x41, 0x61, 30, 0x6f, 130, 210, 0x51, 0x37, 0x16, 0x1f, 
            11, 0xf6, 0x59, 0xa4, 0x9a, 0xca, 90, 0xaf, 13, 0xd4, 0x33, 0x8b, 0x20, 0x63, 0xf1, 0x84, 
            0x80, 0x5c, 0xcb, 0xcf, 8, 180, 0xb9, 0xd3, 0x16, 5, 0xbd, 0x62, 0x83, 0x31, 0x9b, 0x56, 
            0x51, 0x98, 0x9f, 0xba, 0xb2, 0x5b, 170, 0xb2, 0x22, 0x6b, 0x2c, 0xb5, 0xd4, 0x48, 250, 0x63, 
            0x2b, 0x5f, 0x58, 250, 0x61, 250, 100, 9, 0xbb, 0x38, 0xe0, 0xb8, 0x9d, 0x92, 0x60, 0xa8, 
            13, 0x67, 0x6f, 14, 0x37, 0xf5, 13, 1, 0x9f, 0xc2, 0x77, 0xd4, 0xfe, 0xec, 0xf1, 0x73, 
            0x30, 0x39, 0xe0, 0x7d, 0xf5, 0x61, 0x98, 0xe4, 0x2c, 40, 0x55, 4, 0x56, 0x55, 0xdb, 0x2f, 
            0x6b, 0xec, 0xe5, 0x58, 6, 0xb6, 100, 0x80, 0x6a, 0x2a, 0x1a, 0x4e, 0x5b, 15, 0xd8, 0xc4, 
            10, 0x2e, 0x52, 0x19, 0xd9, 0x62, 0xf5, 0x30, 0x48, 190, 140, 0x7b, 0x4f, 0x38, 0x9b, 0xa2, 
            0xc3, 0xaf, 0xc9, 0xd3, 0xc7, 0xc1, 0x62, 0x41, 0x86, 0xb9, 0x61, 0x21, 0x57, 0x6f, 0x99, 0x4f, 
            0xc1, 0xba, 0xce, 0x7b, 0xb5, 0x3b, 0x4d, 0x5e, 0x8a, 0x8b, 0x44, 0x57, 0x5f, 0x13, 0x5f, 0x70, 
            0x6d, 0x5b, 0x29, 0x47, 220, 0x38, 0xe2, 0xec, 4, 0x55, 0x65, 0x12, 0x2a, 0xe8, 0x17, 0x43, 
            0xe1, 0x8e, 0xdd, 0x2a, 0xb3, 0xe2, 0x94, 0xf7, 9, 110, 0x5c, 230, 0xeb, 0x8a, 0xf8, 0x6d, 
            0x89, 0x49, 0x54, 0x48, 0xf5, 0x2f, 0xad, 0xbf, 0xea, 0x94, 0x4b, 0xca, 0xfc, 0x39, 0x87, 130, 
            0x5f, 0x8a, 1, 0xf2, 0x75, 0xf2, 230, 0x71, 0xd6, 0xd8, 0x42, 0xde, 0xf1, 0x2d, 0x1d, 40, 
            0xa6, 0x88, 0x7e, 0xa3, 160, 0x47, 0x1d, 0x30, 0xd9, 0xa3, 0x71, 0xdf, 0x49, 0x1c, 0xcb, 1, 
            0xf8, 0x36, 0xb1, 0xf2, 240, 0x22, 0x58, 0x5d, 0x45, 0x6b, 0xbd, 160, 0xbb, 0xb2, 0x88, 0x42, 
            0xc7, 140, 40, 0xce, 0x93, 0xe8, 0x90, 0x63, 8, 0x90, 0x7c, 0x89, 60, 0xf5, 0x7d, 0xb7, 
            4, 0x2d, 0x4f, 0x55, 0x51, 0x16, 0xfd, 0x7e, 0x79, 0xe8, 190, 0xc1, 0xf2, 0x12, 0xd4, 0xf8, 
            180, 0x84, 5, 0x23, 160, 0xcc, 210, 0x2b, 0xfd, 0xe1, 0xab, 0xad, 13, 0xd1, 0x55, 0x6c, 
            0x23, 0x41, 0x94, 0x4d, 0x77, 0x37, 0x4f, 5, 40, 12, 0xbf, 0x17, 0xb3, 0x12, 0x67, 0x6c, 
            140, 0xc3, 90, 0xf7, 0x41, 0x84, 0x2a, 0x6d, 0xd0, 0x94, 0x12, 0x27, 0x2c, 180, 0xed, 0x9c, 
            0x4d, 0xec, 0x47, 130, 0x97, 0xd5, 0x67, 0xb9, 0x1b, 0x9d, 0xc0, 0x55, 7, 0x7e, 0xe5, 0x8e, 
            0xe2, 0xa8, 0xe7, 0x3e, 0x12, 0xe4, 14, 0x3a, 0x2a, 0x45, 0x55, 0x34, 0xa2, 0xf9, 0x2d, 90, 
            0x1b, 0xab, 0x52, 0x7c, 0x83, 0x10, 0x5f, 0x55, 210, 0xf1, 90, 0x43, 0x2b, 0xc6, 0xa7, 0xa4, 
            0x89, 0x15, 0x95, 0xe8, 180, 0x4b, 0x9d, 0xf8, 0x75, 0xe3, 0x9f, 0x60, 120, 0x5b, 0xd6, 230, 
            13, 0x44, 230, 0x21, 6, 0xbd, 0x47, 0x22, 0x53, 0xa4, 0, 0xad, 0x8d, 0x43, 0x13, 0x85, 
            0x39, 0xf7, 170, 0xfc, 0x38, 0xaf, 0x7b, 0xed, 0xfc, 0xe4, 0x2b, 0x54, 80, 0x98, 0x4c, 0xfc, 
            0x85, 0x80, 0xf7, 0xdf, 60, 0x80, 0x22, 0xe1, 0x94, 0xda, 0xde, 0x24, 0xc6, 0xb0, 0x7a, 0x39, 
            0x38, 220, 15, 0xa1, 0xa7, 0xf4, 0xf9, 0x6f, 0x63, 0x18, 0x57, 0x8b, 0x84, 0x41, 0x2a, 0x2e, 
            0xd4, 0x53, 0xf2, 0xd9, 0, 15, 0xd0, 0xdd, 0x99, 110, 0x19, 0xa6, 10, 0xd0, 0xec, 0x5b, 
            0x58, 0x24, 0xab, 0xc0, 0xcb, 6, 0x65, 0xec, 0x1a, 0x13, 0x38, 0x94, 10, 0x67, 3, 0x2f, 
            0x3f, 0xf7, 0xe3, 0x77, 0x44, 0x77, 0x33, 0xc6, 20, 0x39, 0xd0, 0xe3, 0xc0, 0xa2, 8, 0x79, 
            0xbb, 0x40, 0x99, 0x57, 0x41, 11, 1, 0x90, 0xcd, 0xe1, 0xcc, 0x48, 0x67, 0xdb, 0xb3, 0xaf, 
            0x88, 0x74, 0xf3, 0x4c, 130, 0x8f, 0x72, 0xb1, 0xb5, 0x23, 0x29, 0xc4, 0x12, 0x6c, 0x19, 0xfc, 
            0x8e, 70, 0xa4, 0x9c, 0xc4, 0x25, 0x65, 0x87, 0xd3, 0x6d, 190, 0x8a, 0x93, 0x11, 3, 0x38, 
            0xed, 0x83, 0x2b, 0xf3, 70, 0xa4, 0x93, 0xea, 0x3b, 0x53, 0x85, 0x1d, 0xce, 0xd4, 0xf1, 8, 
            0x83, 0x27, 0xed, 0xfc, 0x9b, 0x1a, 0x18, 0xbc, 0xf9, 0x8b, 0xae, 220, 0x24, 0xab, 80, 0x38, 
            0xe9, 0x72, 0x4b, 0x10, 0x22, 0x17, 0x7b, 70, 0x5d, 0xab, 0x59, 100, 0xf3, 0x40, 0xae, 0xf8, 
            0xbb, 0xe5, 200, 0xf9, 0x26, 3, 0x4e, 0x55, 0x7d, 0xeb, 0xeb, 0xfe, 0xf7, 0x39, 230, 0xe0, 
            10, 0x11, 190, 0x2e, 40, 0xff, 0x98, 0xed, 0xc0, 0xc9, 0x42, 0x56, 0x42, 0xc3, 0xfd, 0, 
            0xf6, 0xaf, 0x87, 0xa2, 0x5b, 1, 0x3f, 50, 0x92, 0x47, 0x95, 0x9a, 0x72, 0xa5, 50, 0x3d, 
            0xae, 0x6b, 0xd0, 0x9b, 7, 210, 0x49, 0x92, 0xe3, 120, 0x4a, 250, 0xa1, 6, 0x7d, 0xf2, 
            0x41, 0xcf, 0x77, 0x74, 4, 20, 0xb2, 12, 0x86, 0x84, 100, 0x16, 0xd5, 0xbb, 0x51, 0xa1, 
            0xe5, 0x6f, 0xf1, 0xd1, 0xf2, 0xe2, 0xf7, 0x5f, 0x58, 0x20, 0x4d, 0xb8, 0x57, 0xc7, 0xcf, 0xdd, 
            0xc5, 0xd8, 190, 0x76, 0x3d, 0xf6, 0x5f, 0x7e, 0xe7, 0x2a, 0x8b, 0x88, 0x24, 0x1b, 0x38, 0x3f, 
            14, 0x41, 0x23, 0x77, 0xf5, 240, 0x4b, 0xd4, 12, 0x1f, 250, 0xa4, 11, 0x80, 0x5f, 0xcf, 
            0x45, 0xf6, 0xe0, 0xda, 0x2f, 0x34, 0x59, 0x53, 0xfb, 0x20, 60, 0x52, 0x62, 0x5e, 0x35, 0xb5, 
            0x62, 0xfe, 0x8b, 0x60, 0x63, 0xe3, 0x86, 90, 0x15, 0x1a, 110, 0xd1, 0x47, 0x45, 0xbc, 50, 
            180, 0xeb, 0x67, 0x38, 0xab, 0xe4, 110, 0x33, 0x3a, 0xb5, 0xed, 0xa3, 0xad, 0x67, 0xe0, 0x4e, 
            0x41, 0x95, 0xee, 0x62, 0x62, 0x71, 0x26, 0x1d, 0x31, 0xef, 0x62, 0x30, 0xaf, 0xd7, 130, 0xac, 
            0xc2, 220, 5, 4, 0xf5, 0x97, 7, 0xbf, 0x11, 0x59, 0x23, 7, 0xc0, 100, 2, 0xe8, 
            0x97, 0xe5, 0x3e, 0xaf, 0x18, 0xac, 0x59, 0xa6, 0x8b, 0x4a, 0x33, 0x90, 0x1c, 110, 0x7c, 0x9c, 
            0x20, 0x7e, 0x4c, 60, 0x3e, 0x61, 100, 0xbb, 0xc5, 0x6b, 0x7c, 0x7e, 0x3e, 0x9f, 0xc5, 0x4c, 
            0x9f, 0xea, 0x73, 0xf5, 0xd7, 0x89, 0xc0, 0x4c, 0xf4, 0xfb, 0xf4, 0x2d, 0xec, 20, 0x1b, 0x51, 
            0xd5, 0xc1, 0x12, 200, 0x10, 0xdf, 11, 0x4a, 0x8b, 0x9c, 0xbc, 0x93, 0x45, 0x6a, 0x3e, 0x3e, 
            0x7d, 0xc1, 0xa9, 0xba, 0xcd, 0xc1, 180, 7, 0xe4, 0xe1, 0x68, 0x86, 0x43, 0xb2, 0x6d, 0x38, 
            0xf3, 0xfb, 12, 0x5c, 0x66, 0x37, 0x71, 0xde, 0x56, 0xef, 110, 160, 0x10, 0x40, 0x65, 0xa7, 
            0x98, 0xf7, 0xd0, 190, 14, 200, 0x37, 0x36, 0xec, 0x10, 0xca, 0x7c, 0x9c, 0xab, 0x84, 30, 
            5, 0x17, 0x76, 2, 0x1c, 0x4f, 0x52, 170, 0x5f, 0xc1, 0xc6, 160, 0x56, 0xb9, 0xd8, 4, 
            0x84, 0x44, 0x4d, 0xa7, 0x59, 0xd8, 0xde, 0x60, 230, 0x38, 14, 5, 0x8f, 3, 0xe1, 0x3b, 
            0x6d, 0x81, 4, 0x33, 0x6f, 0x30, 11, 0xce, 0x69, 5, 0x21, 0x33, 0xfb, 0x26, 0xbb, 0x89, 
            0x7d, 0xb6, 0xae, 0x87, 0x7e, 0x51, 7, 0xe0, 0xac, 0xf7, 150, 10, 0x6b, 0xf9, 0xc4, 0x5c, 
            0x1d, 0xe4, 0x44, 0x47, 0xb8, 0x5e, 250, 0xe3, 120, 0x84, 0x55, 0x42, 0x4b, 0x48, 0x5e, 0xf7, 
            0x7d, 0x47, 0x35, 0x86, 0x1d, 0x2b, 0x43, 5, 3, 0xec, 0x8a, 0xb8, 30, 6, 60, 0x76, 
            12, 0x48, 0x1a, 0x43, 0xa7, 0xb7, 0x8a, 0xed, 30, 0x13, 0xc6, 0x43, 0xee, 0x10, 0xef, 0xdb, 
            0xec, 0xfb, 60, 0x83, 0xb2, 0x95, 0x44, 0xef, 0xd8, 0x54, 0x51, 0x4e, 0x2d, 0x11, 0x44, 0x1d, 
            0xfb, 0x36, 0x59, 30, 0x7a, 0x34, 0xc1, 0xc3, 0xca, 0x57, 0, 0x61, 0xea, 0x67, 0xa5, 0x16, 
            0x9b, 0x55, 0xd0, 0x55, 0xe1, 0x7f, 0xd9, 0x36, 210, 0x40, 0x76, 0xae, 220, 1, 0xce, 0xb0, 
            0x7a, 0x83, 0xd5, 0xcb, 0x20, 0x98, 0xec, 0x6b, 0xc1, 0x72, 0x92, 0x34, 0xf3, 130, 0x57, 0x37, 
            0x62, 0x8a, 50, 0x36, 12, 0x90, 0x43, 0xae, 0xae, 0x5c, 0x9b, 120, 0x8e, 0x13, 0x65, 2, 
            0xfd, 0x68, 0x71, 0xc1, 0xfe, 0xb0, 0x31, 160, 0x24, 130, 0xb0, 0xc3, 0xb1, 0x79, 0x69, 0xa7, 
            0xf5, 210, 0xeb, 0xd0, 130, 0xc0, 50, 220, 0x9e, 0xc7, 0x26, 60, 0x6d, 0x8d, 0x98, 0xc1, 
            0xbb, 0x22, 0xd4, 0xd0, 15, 0x33, 0xec, 0x3e, 0xb9, 0xcc, 0xe1, 220, 0x6a, 0x4c, 0x77, 0x36, 
            20, 0x1c, 0xf9, 0xbf, 0x81, 0x9f, 40, 0x5f, 0x71, 0x85, 50, 0x29, 0x90, 0x75, 0x48, 0xc4, 
            0xb3, 0x4a, 0xce, 0xd8, 0x44, 0x8f, 20, 0x2f, 0xfd, 0x40, 0x57, 0xef, 170, 8, 0x75, 0xd9, 
            70, 0xd1, 0xd6, 110, 50, 0x55, 0x1f, 0xc3, 0x18, 0xfe, 0x84, 0x1f, 0xfc, 0x84, 0xd5, 0xff, 
            0x71, 0x5e, 0x1b, 0x48, 0xc3, 0x86, 0x95, 14, 40, 8, 0x27, 0xd3, 0x38, 0x83, 0x71, 0x7b, 
            0x4c, 0x80, 0x63, 0x54, 0x9a, 0x56, 0xb0, 0xac, 0xcf, 0x80, 0xca, 0x31, 9, 0xef, 0xfe, 0xf3, 
            190, 0xaf, 0x24, 0x7e, 0xa6, 0xfe, 0x53, 0x3f, 0xc2, 0x8d, 0x4a, 0x33, 0x68, 0xd1, 0x22, 0xa6, 
            0x66, 0xad, 0x7b, 0xea, 0xde, 0xb6, 0x43, 0xb0, 0xa1, 0x25, 0x95, 0, 0xa3, 0x3f, 0x75, 70, 
            20, 0x11, 0x44, 0xec, 0xd7, 0x95, 0xbc, 0x92, 240, 0x4f, 0xa9, 0x16, 0x53, 0x62, 0x97, 0x60, 
            0x2a, 15, 0x41, 0xf1, 0x71, 0x24, 190, 0xee, 0x94, 0x7f, 8, 0xcd, 0x60, 0x93, 0xb3, 0x85, 
            0x5b, 7, 0, 0x3f, 0xd8, 15, 40, 0x83, 0x9a, 0xd1, 0x69, 0x9f, 0xd1, 0xda, 0x2e, 0xc3, 
            0x90, 1, 0xa2, 0xb9, 0x6b, 0x4e, 0x2a, 0x66, 0x9d, 0xda, 0xae, 0xa6, 0xea, 0x2a, 0xd3, 0x68, 
            0x2f, 12, 12, 0x9c, 210, 140, 0x4a, 0xed, 0xe2, 0x9e, 0x57, 0x65, 0x9d, 9, 0x87, 0xa3, 
            180, 0xc4, 50, 0x5d, 0xc9, 0xd4, 50, 0x2b, 0xb1, 0xe0, 0x71, 30, 100, 0x4d, 230, 0x90, 
            0x71, 0xe3, 30, 0x40, 0xed, 0x7d, 0xf3, 0x84, 14, 0xed, 200, 120, 0x76, 0xae, 0xc0, 0x71, 
            0x27, 0x72, 0xbb, 5, 0xea, 2, 100, 0xfb, 0xf3, 0x48, 0x6b, 0xb5, 0x42, 0x93, 0x3f, 0xed, 
            0x9f, 0x13, 0x53, 210, 0xf7, 0xfe, 0x2a, 0xec, 0x1d, 0x47, 0x25, 0xdb, 60, 0x91, 0x86, 0xc6, 
            0x8e, 240, 0x11, 0xfd, 0x23, 0x74, 0x36, 0xf7, 0xa4, 0xf5, 0x9e, 0x7a, 0x7e, 0x53, 80, 0x44, 
            0xd4, 0x47, 0xca, 0xd3, 0xeb, 0x38, 0x6d, 230, 0xd9, 0x71, 0x94, 0x7f, 0x4a, 0xc6, 0x69, 0x4b, 
            0x11, 0xf4, 0x52, 0xea, 0x22, 0xfe, 0x8a, 0xb0, 0x36, 0x67, 0x8b, 0x59, 0xe8, 230, 0x80, 0x2a, 
            0xeb, 0x65, 4, 0x13, 0xee, 0xec, 220, 0x9e, 0x5f, 0xb1, 0xec, 5, 0x6a, 0x59, 230, 0x9f, 
            0x5e, 0x59, 0x6b, 0x89, 0xbf, 0xf7, 0x1a, 0xca, 0x44, 0xf9, 0x5b, 0x6a, 0x71, 0x85, 3, 0xe4, 
            0x29, 0x62, 0xe0, 0x70, 0x6f, 0x41, 0xc4, 0xcf, 0xb2, 0xb1, 0xcc, 0xe3, 0x7e, 0xa6, 7, 0xa8, 
            0x87, 0xe7, 0x7f, 0x84, 0x93, 0xdb, 0x52, 0x4b, 0x6c, 0xec, 0x7e, 0xdd, 0xd4, 0x24, 0x48, 0x10, 
            0x69, 0x9f, 4, 0x60, 0x74, 230, 0x48, 0x18, 0xf3, 0xe4, 0x2c, 0xb9, 0x4f, 0x2e, 80, 0x7a, 
            0xdf, 0xd4, 0x54, 0x69, 0x2b, 0x8b, 0xa7, 0xf3, 0xce, 0xff, 0x1f, 0xf3, 0x3e, 0x26, 1, 0x39, 
            0x17, 0x95, 0x84, 0x89, 0xb0, 240, 0x4c, 0x4b, 130, 0x91, 0x9f, 0xc4, 0x4b, 0xac, 0x9d, 0xa5, 
            0x74, 0xaf, 0x17, 0x25, 0xc9, 0xca, 50, 0xd3, 0xbc, 0x89, 0x8a, 0x84, 0x89, 0xcc, 13, 0xae, 
            0x7c, 0xa2, 0xdb, 0x9c, 0x6a, 120, 0x91, 0xee, 0xea, 0x76, 0x5d, 0x4e, 0x87, 0x60, 0xf5, 0x69, 
            0x15, 0x67, 0xd4, 2, 0xcf, 0xaf, 0x48, 0x36, 7, 0xea, 0xbf, 0x6f, 0x66, 0x2d, 6, 0x8f, 
            0xc4, 0x9a, 0xfe, 0xf9, 0xf6, 0x90, 0x87, 0x75, 0xb8, 0xf7, 0xad, 15, 0x76, 0x10, 90, 0x3d, 
            0x59, 0xb0, 0x2e, 0xb3, 0xc7, 0x35, 0x2c, 0xcc, 0x70, 0x56, 0x2b, 0xcb, 0xe3, 0x37, 150, 0xc5, 
            0x2f, 70, 0x1b, 0x8a, 0x22, 70, 0xc7, 0x88, 0xa7, 0x26, 50, 0x98, 0x61, 0xdf, 0x86, 0x22, 
            0x8a, 0xf4, 0x1c, 0x2f, 0x87, 0xa1, 9, 170, 0xcc, 0xa9, 0xae, 0xd3, 0xbd, 0, 0x45, 0x1c, 
            0x9a, 0x54, 0x87, 0x86, 0x52, 0x87, 0xef, 0xff, 30, 0x8f, 0xa1, 0x8f, 0xc1, 0x89, 0x5c, 0x35, 
            0x1b, 0xda, 0x2d, 0x3a, 0x2c, 0x16, 0xb2, 0xc2, 0xf1, 0x56, 0xe2, 120, 0xc1, 0x6b, 0x63, 0x97, 
            0xc5, 0x56, 0x8f, 0xc9, 50, 0x7f, 0x2c, 170, 0xaf, 0xa6, 0xa8, 0xac, 0x20, 0x91, 0x22, 0x88, 
            0xde, 0xe4, 0x60, 0x8b, 0xf9, 0x4b, 0x42, 0x25, 0x1a, 0xe3, 0x7f, 0x9c, 0x2c, 0x19, 0x89, 0x3a, 
            0x7e, 5, 0xd4, 0x36, 0xcc, 0x69, 0x58, 0xc2, 0xc1, 50, 0x8b, 0x2f, 0x90, 0x85, 0xeb, 0x7a, 
            0x39, 80, 0xa5, 0xa1, 0x27, 0x92, 0xc5, 0x66, 0xb0, 0x20, 0x4f, 0x58, 0x7e, 0x55, 0x83, 0x43, 
            0x2b, 0x45, 0xe2, 0x9c, 0xe4, 0xd8, 0x12, 0x90, 0x2c, 0x16, 0x83, 0x56, 0x16, 0x79, 3, 0xb3, 
            0xad, 0x2d, 0x61, 0x18, 0x1a, 0x13, 0x1f, 0x37, 0xe2, 0xe1, 0x9c, 0x73, 0x7b, 0x80, 0xd5, 0xfd, 
            0x2d, 0x51, 0x87, 0xfc, 0x7b, 170, 0xd7, 0x1f, 0x2c, 0x7a, 0x8e, 0xaf, 0xf4, 0x8d, 0xbb, 0xcd, 
            0x95, 0x11, 0x7c, 0x72, 11, 0xee, 0x6f, 0xe2, 0xb9, 0xaf, 0xde, 0x37, 0x83, 0xde, 140, 0x8d, 
            0x62, 5, 0x67, 0xb7, 150, 0xc6, 0x8d, 0x56, 0xb6, 13, 0xd7, 0x62, 0xba, 0xd6, 70, 0x36, 
            0xbd, 0x8e, 200, 230, 0xea, 0x2a, 0x6c, 0x10, 20, 0xff, 0x6b, 0x5b, 250, 130, 60, 70, 
            0xb1, 0x30, 0x43, 70, 0x51, 0x8a, 0x7d, 0x9b, 0x92, 0x3e, 0x83, 0x79, 0x5b, 0x55, 0x5d, 0xb2, 
            0x6c, 0x5e, 0xce, 0x90, 0x62, 0x8e, 0x53, 0x98, 0xc9, 13, 0x6d, 0xe5, 0x2d, 0x57, 0xcd, 0xc5, 
            0x81, 0x57, 0xba, 0xe1, 0xe8, 0xb8, 0x8f, 0x72, 0xe5, 0x4f, 0x13, 220, 0xea, 0x9d, 0x71, 0x15, 
            0x10, 0xb2, 0x11, 0x88, 0xd5, 9, 0xd4, 0x7f, 0x5b, 0x65, 0x7f, 0x2c, 0x3b, 0x38, 0x4c, 0x11, 
            0x68, 80, 0x8d, 0xfb, 0x9e, 0xb0, 0x59, 0xbf, 0x94, 0x80, 0x89, 0x4a, 0xc5, 0x1a, 0x18, 0x12, 
            0x89, 0x53, 0xd1, 0x4a, 0x10, 0x29, 0xe8, 140, 0x1c, 0xec, 0xb6, 0xea, 70, 0xc7, 0x17, 0x8b, 
            0x25, 0x15, 0x31, 0xa8, 0xa2, 0x6b, 0x43, 0xb1, 0x9d, 0xe2, 0xdb, 11, 0x87, 0x9b, 0xb0, 0x11, 
            4, 14, 0x71, 210, 0x29, 0x77, 0x89, 130, 10, 0x66, 0x41, 0x7f, 0x1d, 11, 0x48, 0xff, 
            0x72, 0xbb, 0x24, 0xfd, 0xc2, 0x48, 0xa1, 0x9b, 0xfe, 0x7b, 0x7f, 0xce, 0x88, 0xdb, 0x86, 0xd9, 
            0x85, 0x3b, 0x1c, 0xb0, 220, 0xa8, 0x33, 7, 0xbf, 0x51, 0x2e, 0xe3, 14, 0x9a, 0, 0x97, 
            30, 6, 0xc0, 0x97, 0x43, 0x9d, 0xd8, 0xb6, 0x45, 0xc4, 0x86, 0x67, 0x5f, 0, 0xf8, 0x88, 
            0x9a, 0xa4, 0x52, 0x9e, 0xc7, 170, 0x8a, 0x83, 0x75, 0xec, 0xc5, 0x18, 0xae, 0xce, 0xc3, 0x2f, 
            0x1a, 0x2b, 0xf9, 0x18, 0xff, 0xae, 0x1a, 0xf5, 0x53, 11, 0xb5, 0x33, 0x51, 0xa7, 0xfd, 0xe8, 
            0xa8, 0xe1, 0xa2, 100, 0xb6, 0x22, 0x17, 0x43, 0x80, 0xcc, 10, 0xd8, 0xae, 0x3b, 0xba, 0x40, 
            0xd7, 0xd9, 0x92, 0x4a, 0x89, 0xdf, 4, 0x10, 0xee, 0x9b, 0x18, 0x2b, 0x6a, 0x77, 0x69, 0x8a, 
            0x68, 0xf4, 0xf9, 0xb9, 0xa2, 0x21, 0x15, 110, 230, 30, 0x3b, 3, 0x62, 0x30, 0x9b, 0x60, 
            0x41, 0x7e, 0x25, 0x9b, 0x9e, 0x8f, 0xc5, 0x52, 0x10, 8, 0xf8, 0xc2, 0x69, 0xa1, 0x21, 0x11, 
            0x88, 0x37, 0x5e, 0x79, 0x35, 0x66, 0xff, 0x10, 0x42, 0x18, 110, 0xed, 0x97, 0xb6, 0x6b, 0x1c, 
            0x4e, 0x36, 0xe5, 0x6d, 0x7d, 180, 0xe4, 0xbf, 0x20, 0xb9, 0xe0, 5, 0x3a, 0x69, 0xd5, 0xb8, 
            0xe3, 0xd5, 220, 0xe0, 0xb9, 0xac, 0x53, 0x3e, 7, 0xa4, 0x57, 0xad, 0x77, 0xff, 0x48, 0x18, 
            0x76, 0x2a, 0xac, 0x49, 0x2a, 0x8e, 0x47, 0x75, 0x6d, 0x9f, 0x67, 0x63, 0x30, 0x35, 140, 0x39, 
            5, 0x39, 0xd5, 0x6f, 100, 0x3a, 0x5b, 0xad, 0xca, 11, 0xbb, 130, 0x52, 0x99, 0x45, 0xb1, 
            0x93, 0x36, 0x36, 0x99, 0xaf, 0x13, 0x20, 0x44, 0x36, 0xd8, 2, 0x44, 9, 0x39, 0x92, 0x85, 
            0xff, 0x4a, 0x4a, 0x97, 0x87, 0xa6, 0x63, 0xd7, 0xc7, 0xb5, 0xb5, 0x24, 0xed, 15, 180, 0x6f, 
            12, 0x58, 0x52, 20, 0xd9, 0xa6, 0x7b, 0xd3, 0x79, 0xbc, 0x38, 0x58, 0xa1, 0xbd, 0x3b, 0x84, 
            6, 0xd8, 0x1a, 6, 0xfd, 0x6b, 0xa8, 0xea, 0x4b, 0x69, 40, 4, 0x37, 0xad, 130, 0x99, 
            0xfb, 14, 0x1b, 0x85, 0xbd, 0xa8, 0x5d, 0x73, 0xcd, 220, 0x58, 0x75, 10, 190, 0x63, 0x6c, 
            0x48, 0xe7, 0x4c, 0xe4, 0x30, 0x2b, 4, 0x60, 0xb9, 0x15, 0xd8, 0xda, 0x86, 0x81, 0x75, 0x8f, 
            150, 0xd4, 0x8d, 0x1c, 0x5d, 0x70, 0x85, 0x7c, 0x1c, 0x67, 0x7b, 0xd5, 8, 0x67, 0xa6, 0xce, 
            0x4b, 10, 0x66, 0x70, 0xb7, 0xe5, 0x63, 0xd4, 0x5b, 0x8a, 130, 0xea, 0x10, 0x67, 0xca, 0xe2, 
            0xf4, 0xef, 0x17, 0x85, 0x2f, 0x2a, 0x5f, 0x8a, 0x97, 130, 0xf8, 0x6a, 0xd6, 0x34, 0x10, 0xea, 
            0xeb, 0xc9, 0x5c, 60, 0xe1, 0x49, 0xf8, 70, 0xeb, 0xde, 0xbd, 0xf6, 0xa9, 0x92, 0xf1, 170, 
            0xa6, 160, 0x18, 0xb0, 0x3a, 0xd3, 15, 0x1f, 0xf3, 0x6f, 0xff, 0x31, 0x45, 0x43, 0x44, 0xd3, 
            80, 0x9a, 0xf7, 0x88, 9, 150, 0xc1, 0xce, 0x76, 0xcc, 0xf2, 0x2c, 0x2c, 0xba, 0xad, 130, 
            0x77, 0x8f, 0x18, 0x84, 0xc0, 210, 7, 0x9c, 0x36, 0x90, 0x83, 0x4e, 11, 0xa5, 0x4f, 0x43, 
            0x3e, 4, 0xab, 120, 0x4f, 0xd6, 0xfb, 9, 1, 0x24, 0x90, 0xda, 0x6f, 60, 0x3a, 0x61, 
            13, 0x7f, 0x69, 0x4a, 0xeb, 0x2b, 0x30, 2, 180, 0xdb, 0xe0, 0x84, 0xa9, 0xec, 0xd7, 0x35, 
            0xbf, 0x37, 0x7d, 0x85, 0x58, 0xce, 0xa9, 0x4e, 0xe4, 0x80, 0xc7, 0xa8, 0xd3, 0x30, 0x67, 0x48, 
            0xeb, 0x29, 0xaf, 0x2f, 0x74, 0x6a, 180, 0xa7, 0x3f, 15, 0x3f, 0x92, 0xaf, 0xf3, 0xca, 0xac, 
            0xaf, 0x4b, 0xd9, 0x94, 0xc0, 0x43, 0xca, 0x81, 13, 0x2f, 0x48, 0xa1, 0xb0, 0x27, 0xd5, 210, 
            0xef, 0x4b, 5, 0x85, 0xa3, 0xde, 0x4d, 0x93, 0x30, 60, 240, 0xbb, 0x4a, 0x8f, 0x30, 0x27, 
            0x4c, 0xeb, 0xe3, 0x3e, 100, 0xed, 0x9a, 0x2f, 0x3b, 0xf1, 130, 240, 0xba, 0xf4, 0xcf, 0x7f, 
            0x40, 0xcb, 0xb0, 0xe1, 0x7f, 0xbc, 170, 0x57, 0xd3, 0xc9, 0x74, 0xf2, 250, 0x43, 13, 0x22, 
            0xd0, 0xf4, 0x77, 0x4e, 0x93, 0xd7, 0x85, 0x70, 0x1f, 0x99, 0xbf, 0xb6, 0xde, 0x35, 0xf1, 0x30, 
            0xa7, 0x5e, 0x71, 240, 0x6b, 1, 0x2d, 0x7b, 100, 240, 0x33, 0x53, 10, 0x39, 0x88, 0xf3, 
            0x6b, 0x3a, 0xa6, 0x6b, 0x35, 210, 0x2f, 0x43, 0xcd, 2, 0xfd, 0xb5, 0xe9, 0xbc, 0x5b, 170, 
            0xd8, 0xa4, 0x19, 0x7e, 14, 0x5d, 0x94, 0x81, 0x9e, 0x6f, 0x77, 0xad, 0xd6, 14, 0x74, 0x93, 
            150, 0xe7, 0xc4, 0x18, 0x5f, 0xad, 0xf5, 0x19
         };
        private uint MAGIC30 = 0x72636e65;
        private uint MAGIC34 = 0x6a624f79;

        private unsafe void decrypt(uint* magic, uint* arg1, uint* arg2)
        {
            uint num = arg1[0];
            uint num2 = arg2[0];
            for (int i = 0x11; i > 1; i--)
            {
                uint v = magic[i] ^ num;
                num = num2 ^ this.lookup(magic, v);
                num2 = v;
            }
            arg1[0] = num2 ^ magic[0];
            arg2[0] = num ^ magic[1];
        }

        public unsafe byte[] Decrypt(byte[] secure_area, uint game_code)
        {
            byte[] array = new byte[0x4000];
            secure_area.CopyTo(array, 0);
            uint* numPtr = &game_code;
            fixed (byte* numRef = array)
            {
                this.decrypt_arm9(numPtr[0], numRef);
            }
            return array;
        }

        private unsafe void decrypt_arm9(uint cardheader_gamecode, byte* data)
        {
            uint* numPtr = (uint*) data;
            this.init1(cardheader_gamecode);
            fixed (uint* numRef = this.card_hash)
            {
                this.decrypt(numRef, numPtr + 1, numPtr);
                this.arg2[1] = this.arg2[1] << 1;
                this.arg2[2] = this.arg2[2] >> 1;
                this.init2(numRef, this.arg2);
                this.decrypt(numRef, numPtr + 1, numPtr);
                if ((numPtr[0] == this.MAGIC30) && (numPtr[1] == this.MAGIC34))
                {
                    numPtr++;
                    numPtr[0] = 0xe7ffdeff;
                    numPtr++;
                    numPtr[0] = 0xe7ffdeff;
                }
                else
                {
                    numPtr += 2;
                }
                for (uint i = 0x7f8; i > 0; i -= 8)
                {
                    this.decrypt(numRef, numPtr + 1, numPtr);
                    numPtr += 2;
                }
            }
        }

        private unsafe void encrypt(uint* magic, uint* arg1, uint* arg2)
        {
            uint num = arg1[0];
            uint num2 = arg2[0];
            for (int i = 0; i < 0x10; i++)
            {
                uint v = magic[i] ^ num;
                num = num2 ^ this.lookup(magic, v);
                num2 = v;
            }
            arg2[0] = num ^ magic[0x10];
            arg1[0] = num2 ^ magic[0x11];
        }

        public unsafe byte[] Encrypt(byte[] secure_area, uint game_code)
        {
            byte[] array = new byte[0x4000];
            secure_area.CopyTo(array, 0);
            uint* numPtr = &game_code;
            fixed (byte* numRef = array)
            {
                this.encrypt_arm9(numPtr[0], numRef);
            }
            return array;
        }

        private unsafe void encrypt_arm9(uint cardheader_gamecode, byte* data)
        {
            uint* numPtr = (uint*) data;
            numPtr += 2;
            this.init1(cardheader_gamecode);
            this.arg2[1] = this.arg2[1] << 1;
            this.arg2[2] = this.arg2[2] >> 1;
            fixed (uint* numRef = this.card_hash)
            {
                this.init2(numRef, this.arg2);
                for (uint i = 0x7f8; i > 0; i -= 8)
                {
                    this.encrypt(numRef, numPtr + 1, numPtr);
                    numPtr += 2;
                }
                numPtr = (uint*) data;
                if ((numPtr[0] == 0xe7ffdeff) && (numPtr[1] == 0xe7ffdeff))
                {
                    numPtr[0] = this.MAGIC30;
                    numPtr[1] = this.MAGIC34;
                }
                this.encrypt(numRef, numPtr + 1, numPtr);
                this.init1(cardheader_gamecode);
                this.encrypt(numRef, numPtr + 1, numPtr);
            }
        }

        private unsafe void init1(uint cardheader_gamecode)
        {
            Buffer.BlockCopy(this.encr_data, 0, this.card_hash, 0, 0x1048);
            this.arg2[0] = cardheader_gamecode;
            this.arg2[1] = cardheader_gamecode >> 1;
            this.arg2[2] = cardheader_gamecode << 1;
            fixed (uint* numRef = this.card_hash)
            {
                this.init2(numRef, this.arg2);
                this.init2(numRef, this.arg2);
            }
        }

        private unsafe void init2(uint* magic, uint[] a)
        {
            fixed (uint* numRef = a)
            {
                this.encrypt(magic, numRef + 2, numRef + 1);
                this.encrypt(magic, numRef + 1, numRef);
                this.update_hashtable(magic, (byte*) numRef);
            }
        }

        private unsafe uint lookup(uint* magic, uint v)
        {
            uint num = (v >> 0x18) & 0xff;
            uint num2 = (v >> 0x10) & 0xff;
            uint num3 = (v >> 8) & 0xff;
            uint num4 = v & 0xff;
            num = magic[(int) ((uint*) (num + 0x12))];
            num2 = magic[(int) ((uint*) ((num2 + 0x12) + 0x100))];
            num3 = magic[(int) ((uint*) ((num3 + 0x12) + 0x200))];
            num4 = magic[(int) ((uint*) ((num4 + 0x12) + 0x300))];
            return (num4 + (num3 ^ (num2 + num)));
        }

        private unsafe void update_hashtable(uint* magic, byte* arg1)
        {
            for (int i = 0; i < 0x12; i++)
            {
                uint num2 = 0;
                for (int m = 0; m < 4; m++)
                {
                    num2 = num2 << 8;
                    num2 |= arg1[((i * 4) + m) & 7];
                }
                uint* numPtr1 = magic + i;
                numPtr1[0] ^= num2;
            }
            uint num4 = 0;
            uint num5 = 0;
            for (int j = 0; j < 0x12; j += 2)
            {
                this.encrypt(magic, &num4, &num5);
                magic[j] = num4;
                magic[j + 1] = num5;
            }
            for (int k = 0; k < 0x400; k += 2)
            {
                this.encrypt(magic, &num4, &num5);
                magic[k + 0x12] = num4;
                magic[(k + 0x12) + 1] = num5;
            }
        }
    }
}